// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package vlan

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// V1Client is the client API for V1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type V1Client interface {
	SaveVLAN(ctx context.Context, in *VLAN, opts ...grpc.CallOption) (*SaveVLANResponse, error)
	GetVLANs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetVLANsResponse, error)
}

type v1Client struct {
	cc grpc.ClientConnInterface
}

func NewV1Client(cc grpc.ClientConnInterface) V1Client {
	return &v1Client{cc}
}

func (c *v1Client) SaveVLAN(ctx context.Context, in *VLAN, opts ...grpc.CallOption) (*SaveVLANResponse, error) {
	out := new(SaveVLANResponse)
	err := c.cc.Invoke(ctx, "/vlan.V1/SaveVLAN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) GetVLANs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetVLANsResponse, error) {
	out := new(GetVLANsResponse)
	err := c.cc.Invoke(ctx, "/vlan.V1/GetVLANs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// V1Server is the server API for V1 service.
// All implementations must embed UnimplementedV1Server
// for forward compatibility
type V1Server interface {
	SaveVLAN(context.Context, *VLAN) (*SaveVLANResponse, error)
	GetVLANs(context.Context, *emptypb.Empty) (*GetVLANsResponse, error)
	mustEmbedUnimplementedV1Server()
}

// UnimplementedV1Server must be embedded to have forward compatible implementations.
type UnimplementedV1Server struct {
}

func (UnimplementedV1Server) SaveVLAN(context.Context, *VLAN) (*SaveVLANResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveVLAN not implemented")
}
func (UnimplementedV1Server) GetVLANs(context.Context, *emptypb.Empty) (*GetVLANsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVLANs not implemented")
}
func (UnimplementedV1Server) mustEmbedUnimplementedV1Server() {}

// UnsafeV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to V1Server will
// result in compilation errors.
type UnsafeV1Server interface {
	mustEmbedUnimplementedV1Server()
}

func RegisterV1Server(s grpc.ServiceRegistrar, srv V1Server) {
	s.RegisterService(&V1_ServiceDesc, srv)
}

func _V1_SaveVLAN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VLAN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).SaveVLAN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vlan.V1/SaveVLAN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).SaveVLAN(ctx, req.(*VLAN))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_GetVLANs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).GetVLANs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vlan.V1/GetVLANs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).GetVLANs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// V1_ServiceDesc is the grpc.ServiceDesc for V1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var V1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vlan.V1",
	HandlerType: (*V1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveVLAN",
			Handler:    _V1_SaveVLAN_Handler,
		},
		{
			MethodName: "GetVLANs",
			Handler:    _V1_GetVLANs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/vlan.proto",
}
